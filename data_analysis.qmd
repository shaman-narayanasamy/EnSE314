---
title: "Data analysis"
format: html
params:
  metadata_file: "PRJEB48354_metadata.xlsx"
execute:
  warning: false
  message: false
---

## Load packages
```{r load_packages}
## Load packages
### Standardized management of processed amplicon sequencing output (e.g. from DADA2) 
library(phyloseq)

### Ecological analysis
library(vegan)

### Differential abundance 
library(DESeq2)

### Nice heatmaps
library(tidyHeatmap) 

### A "universe" of packages for tidy data management and data visualizations using ggplot2
library(tidyverse)
library(readxl)
theme_set(theme_bw()) # Set simple theme
```

```{r setup}
## CHANGE this to the path in your computer where you saved the data
root_dir <- "/Users/shaman.narayanasamy/Work/Data/EnSE314-PublicHealthMicrobio/EnSE314_data/"

## Define input directory where you will read all your data from
input_dir <- paste(root_dir, "input", sep = "/")

## Define the output directory where you will generate all your output
output_dir <- paste(root_dir, "output", sep = "/") 

## Define metadata file path
metadata_path <- paste(input_dir, params$metadata_file, sep = "/")

## Read phyloseq object containing OTU, taxonomy, sample and phylogenetic tree data generated from the previous sessions
#ps <- readRDS(paste(output_dir, "phyloseq_object.rds", sep = "/")) 

## If for some reason you were unable to produce the phyloseq object from the last session, just read the one that has been prepared
ps <- readRDS(paste(input_dir, "phyloseq_object.rds", sep = "/"))

ps
```
## Evaluating information content
```{r plot_cummulative_abundance, fig.height=4, fig.width=4}
## Sum taxa
otu_abundances <- 
  taxa_sums(ps) %>% # Sum up OTUs
  sort(decreasing = TRUE) # Sort from highest to lowest

cumulative_abundance <- 
  cumsum(otu_abundances) / sum(otu_abundances) # Compute relative cumulative sums

bind_cols(OTU = 1:length(cumulative_abundance), 
          rel_cum_ab = cumulative_abundance) %>%    
  ggplot(aes(x = OTU, y = rel_cum_ab)) +
  geom_line() +
  geom_hline(yintercept = 0.95, linetype = "dashed", color = "red") +
  labs(title = "Cumulative Abundance of OTUs", x = "Number of OTUs", y = "Cumulative Relative Abundance")
```
## Data processing and normalization 
### Rarefaction
```{r rarefy_otus}
## Rarefy data
ps_rarefied = rarefy_even_depth(ps, 
                                rngseed = 1, # Set seed for reproducibility
                                sample.size = 0.95*min(sample_sums(ps)), # Subselect no. of reads equivalent to 95% of the smallest sample
                                replace = FALSE) # Do not replace
```

```{r prepare_metadata}
## Obtain sample information
sample_info <-  
  read_xlsx(metadata_path, sheet = "Metadata") %>% 
  mutate(common_name = str_replace(common_name, "&", "_")) %>% 
  separate(common_name, into = c("tmp1", "tmp2", "day", "tmp3", "type", "reactor"), sep = "_", remove = FALSE, fill = "right")  %>% 
  select(-c(tmp1, tmp2, tmp3)) %>% 
  mutate(day = str_remove(day, "day")) %>% 
  mutate(day = as.numeric(day)) %>% 
  mutate(condition = case_when(
   type == "feedWW" ~ "control",
   TRUE ~ "treatment"
  )) %>% 
  select(sample_id = Run, condition, reactor, day)

# Create a count table
count_data <-  
  full_join(
    bind_cols( 
      sample_id = sample_names(ps), 
      all = sample_sums(ps) 
      ),  
    bind_cols( 
      sample_id = sample_names(ps_rarefied), 
      rarified = sample_sums(ps_rarefied) 
      ), 
    by = "sample_id") 

## Join sample information and count informaiton
count_data <- left_join(count_data, sample_info, by = "sample_id")
```
```{r display_count, fig.height = 6, fig.width = 8}
## Visualise total counts of the data
count_data %>% 
  pivot_longer(cols = c("rarified", "all")) %>% 
  dplyr::rename(c("count" = "value", "Count type" = "name")) %>% 
  ggplot(aes(x = day, y = count, fill = `Count type`)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ condition + reactor, nrow = 2) +
  scale_fill_manual(values = c("gray", "#3182BD")) +
  theme(axis.text.x = element_text(angle = 90))
```
### Remove low abundant OTUs
```{r remove_low_abundant_otus}
# Define a minimum count threshold
min_count_threshold <- 10

# Filter out OTUs with a total count below the threshold
ps_pruned <- filter_taxa(ps_rarefied, function(x) sum(x) >= min_count_threshold, TRUE)
ps_pruned
```
```{r remove_low_occurance_otus}
# Define a minimum sample presence threshold
min_samples_threshold <- round(nrow(sample_data(ps_pruned)) * 0.10) # OTU must be present at least in 10% of the samples
# Filter out OTUs that are not present in at least 'min_samples_threshold' samples
ps_pruned <- filter_taxa(ps_pruned, function(x) sum(x > 0) >= min_samples_threshold, TRUE)
ps_pruned
```

```{r inspect_saturation, fig.height=4, fig.width=4}
otu_abundances <- 
  taxa_sums(ps_pruned) %>% # Sum up OTUs
  sort(decreasing = TRUE) # Sort from highest to lowest

cumulative_abundance <- 
  cumsum(otu_abundances) / sum(otu_abundances) # Compute relative cumulative sums

bind_cols(OTU = 1:length(cumulative_abundance), 
          rel_cum_ab = cumulative_abundance) %>%    
  ggplot(aes(x = OTU, y = rel_cum_ab)) +
  geom_line() +
  geom_hline(yintercept = 0.95, linetype = "dashed", color = "red") +
  labs(title = "Cumulative Abundance of OTUs", x = "Number of OTUs", y = "Cumulative Relative Abundance")
```

## Data exploration
### Relative abundance
```{r normalize_data}
# Transform counts to relative abundances or use another normalization method
ps_relab <- transform_sample_counts(ps_pruned, function(x) x / sum(x))
```

```{r, plot_relab, fig.height = 6, fig.width = 12}
plot_bar(ps_relab, fill="Phylum", x = "day", facet_grid = ~ condition + reactor) + 
  ggplot2::theme_minimal()
```

### Dimensionality reduction
```{r dimensionality_reduction, fig.width = 5, fig.height = 4}
# PCoA plot using the unweighted UniFrac as distance
wunifrac_dist = phyloseq::distance(ps_rarefied, method="unifrac", weighted=F)
ordination = ordinate(ps_rarefied, method="PCoA", distance=wunifrac_dist)
plot_ordination(ps_rarefied, ordination, color="condition") + theme(aspect.ratio=1)
```
## Statistical analysis
### Alpha diversity
```{r plot_richness_sample, fig.height=4, fig.width=8}
plot_richness(ps_rarefied, color = "condition", measures = c("Observed", "Chao1"))
```

```{r plot_richness_barplot, fig.height=6, fig.width=4}
my_measures <- c("Observed", "Simpson")
plot_richness(ps_rarefied, x = "condition", measures = my_measures, nrow = length(my_measures)) + 
  geom_boxplot(aes(fill = condition), alpha = 0.5) 
```
```{r}
rich <- estimate_richness(ps_rarefied)
```

Test whether the observed number of OTUs differs significantly between conditions. We make a non-parametric test, the Wilcoxon rank-sum test (Mann-Whitney):
```{r}
pairwise.wilcox.test(rich$Observed, sample_data(ps_rarefied)$condition)
```
 
### Beta diversity
Test whether the conditions differ significantly from each other using the PERMutational ANalysis Of Variance Analysis (PERMANOVA):
```{r}
adonis2(wunifrac_dist ~ sample_info$condition)
```

### Diffirential OTU abundance testing
We use DESeq2, which is typically used to identify differentially expressed genes/transcripts to perform this analysis.
```{r deseq2}
sample_data(ps)$condition <- as.factor(sample_data(ps)$condition)
ds <- phyloseq_to_deseq2(ps, ~ condition)
ds <- DESeq(ds)

alpha = 0.01

res_sig <- 
  results(ds, contrast=c("condition", "treatment", "control"), alpha=alpha) %>% 
  as.data.frame() %>% 
  rownames_to_column("OTU") %>% 
  as_tibble() %>% 
  arrange(padj, desc(log2FoldChange)) %>% 
  filter(padj <= alpha)  %>%  
    left_join(  
      tax_table(ps) %>% as.data.frame() %>% rownames_to_column("OTU") %>% as_tibble(),
      by = "OTU"
  ) %>% 
  filter(!is.na(Genus)) # Remove any taxa unclassified on the Genus level
  
top_otus <- res_sig$OTU

res_sig <- 
  select(res_sig, -OTU) # Remove the OTU column to clean up
```

```{r}
top_otu_abundance <- 
  otu_table(ps, taxa_are_rows = TRUE) %>% t() %>%  as.data.frame() %>% rownames_to_column("OTU") %>% as_tibble() %>% 
    filter(OTU %in% top_otus) %>% 
    pivot_longer(cols = -OTU, names_to = "sample_id", values_to = "abundance") %>% 
    left_join( 
      tax_table(ps)[top_otus,] %>% as.data.frame() %>% rownames_to_column("OTU") %>% as_tibble(), 
      by = "OTU") %>% 
    left_join( 
      sample_info,
      by = "sample_id"
    ) %>% select(-OTU)
    
top_otu_abundance %>% 
  mutate(taxa = paste(Phylum, Genus, sep = ";")) %>% 
  select(-c(Kingdom, Phylum, Class, Order, Family, Genus, Species,)) %>% 
  group_by(taxa, sample_id) %>% 
  mutate(abundance = sum(abundance, na.rm = T)) %>% 
  ungroup() %>% 
  arrange(reactor, day) %>% 
  mutate(sample_name = paste(reactor, day, sep = ":")) %>% 
  mutate(condition = fct_relevel(condition, c("treatment", "control")),
         reactor = fct_relevel(reactor, c("A1", "A2", "B1", "B2")),
         day = as.character(day),
         day = fct_relevel(day, as.character(c(15, 30, 45, 60, 75, 90, 105, 120))),
         sample_name = fct_relevel(sample_name, c("A1:15", "A1:30", "A1:45",
         "A1:60", "A1:75", "A1:90", "A1:105","A1:120","A2:15", "A2:30", "A2:45",
         "A2:60", "A2:75", "A2:90", "A2:105","A2:120","B1:15", "B1:30", "B1:60",
         "B1:90", "B1:120","B2:15", "B2:30", "B2:60", "B2:90", "B2:120"))
         ) %>% 
  distinct() %>%  
  group_by(condition) %>% 
    tidyHeatmap::heatmap(.row = taxa, .column = sample_name, .value = abundance, scale = "both", 
                         cluster_rows = TRUE,  # Cluster rows to see if there are any intersting bacteria
                         cluster_columns = FALSE,  # Turn off clustering for columns
                         palette_value = circlize::colorRamp2(c(-2, -1, 0, 1, 2), viridis::magma(5))
                       ) %>% 
                         split_rows(5)
```


```{r}
ggplot(res_sig, aes(x=Phylum, y=log2FoldChange, color=Genus)) +
    geom_jitter(size=3, width = 0.2) +
    theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
```
```{r}
## List top 10 taxa
res_sig %>% head(10) %>% 
  select(Phylum, Genus, padj, log2FoldChange) %>% 
  mutate(Taxa = paste(Phylum, Genus, sep = ";"),
         `log10(Fold change)` = log10(2^log2FoldChange),
         `-log10(Adjusted p-value)` = -log10(padj)) %>% 
  select(-c(Phylum, Genus, padj, log2FoldChange)) %>% 
  knitr::kable()
```

